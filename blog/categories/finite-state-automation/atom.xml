<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: finite_state_automation | alykoff.github.io]]></title>
  <link href="http://Alykoff.github.io/blog/categories/finite-state-automation/atom.xml" rel="self"/>
  <link href="http://Alykoff.github.io/"/>
  <updated>2013-06-23T16:38:41+04:00</updated>
  <id>http://Alykoff.github.io/</id>
  <author>
    <name><![CDATA[Alykoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Идеальный муравей]]></title>
    <link href="http://Alykoff.github.io/blog/2013/06/01/idiealnyi-muravei/"/>
    <updated>2013-06-01T19:43:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/06/01/idiealnyi-muravei</id>
    <content type="html"><![CDATA[<p>
    Муравьи. Какие же они бывают разные! И черные, и красные, и черные маленькие, и черные большие и...Ох, сколько же вас! Давным-давно мне очень нравились муравьи. С ними было неплохо, можно было наблюдать их локальные войны. Отчего-то (в какой-то степени это и ясно) муравьи одного цвета не любят муравьев другого цвета. Но в данном случае у нас муравьи все одного цвета - черно-белого. Да-да, черно-белого. (На самом деле это <a href="http://ru.wikipedia.org/wiki/%D0%9C%D1%83%D1%80%D0%B0%D0%B2%D0%B5%D0%B9_%D0%9B%D1%8D%D0%BD%D0%B3%D1%82%D0%BE%D0%BD%D0%B0">муравьи Лэнгтона</a>). В конкретном случае муравьи работают только с черным и белым цветом, оттого я их так и назвал. А что ещё они умеют? А вот что:
    <ul style="margin-left:30px;">
        <li>
            Жить на клеточном поле занимая при этом одну клетку.
        </li>
        <li>
            При нахождении на черной клетке — поворачивать на 90 градусов влево, изменяя при этом цвет клетки на противоположный и делая шаг вперед на следующую клетку.
        </li>
        <li>
            При нахождении на белой клетке — поворачивать на 90° вправо, изменяя цвет клетки на противоположный и делая шаг вперед на следующую клетку.
        </li>
    </ul>
</p>


<p>
    Казалось бы что муравей подчиняесь вполня четким правилам ведет себя хаотично. Но в итоге это оказывается не так. Через некоторое время, если муравью никто не мешал он начинает строить дорожку с цикличностью в 104 шага. И так до бесконечности.
</p>


<p>
    Черное и белое. Где правда, а где вымысел? Где фон, а где узор? Забавно представить все с другой стороны. Например, как-будто муравей наоборот препятствует изменению цветов поля, а его отсутствие не уберегает поле от изменения цвета.
</p>


<script src="http://Alykoff.github.io/javascripts/libs/processing-1.4.1.min.js"></script>


<script type="text/processing" data-processing-target="mycanvas">
    final int WIDHT = 200;
    final int HEIGTH = 200;
    final color BLACK = color(0, 0, 0);
    final color WHITE = color(255, 255, 255);
     
    int frameRateValue = 300;
    int centerX = WIDHT / 2;
    int centerY = HEIGTH / 2;
    int direction = 0;
    Ant ant1, ant2, ant3;
     
     
    void setup() {
      frameRate(frameRateValue);
      size(WIDHT, HEIGTH);
      background(BLACK);
      ant1 = new Ant(centerX, centerY, 0);
      ant2 = new Ant(50, 50, 0);
      ant3 = new Ant(50, 150, 3);
    }
     
    void draw() {
       ant1.step();
       ant2.step();
       ant3.step();
    }
     
    class Direction {
       static final int UP_DIRECTION = 0;
       static final int RIGTH_DIRECTION = 1;
       static final int DOWN_DIRECTION = 2;
       static final int LEFT_DIRECTION = 3;
       static final int MAX_DIRECTION_STATE = LEFT_DIRECTION;
       static final int MIN_DIRECTION_STATE = UP_DIRECTION;
       static final int LEFT_STEP_ROTATE = -1;
       static final int RIGTH_STEP_ROTATE = 1;
    }
     
    class Ant {
        private int x, y, direction;
       
        Ant(int x, int y) {
          this.x = x;
          this.y = y;
          this.direction = 0;
        }
       
        Ant(int x, int y, int direction) {
          this.x = x;
          this.y = y;
          this.direction = direction;      
        }
       
        void step() {
          color currentColor = get(x, y);
          if (currentColor == BLACK) {
            set(x, y, WHITE);
            turn(Direction.LEFT_STEP_ROTATE);
          } else if (currentColor == WHITE) {
            set(x, y, BLACK);
            turn(Direction.RIGTH_STEP_ROTATE);
          }
          move();
        }
       
        private void move() {
          if (x < 0) x = WIDHT;
          else if (x > WIDHT) x = 0;
          if (y < 0) y = HEIGTH;
          else if (y > HEIGTH) y = 0;
          switch(direction) {
            case Direction.UP_DIRECTION:
              y = y - 1;
              break;
            case Direction.RIGTH_DIRECTION:
              x = x + 1;
              break;
            case Direction.DOWN_DIRECTION:
              y = y + 1;
              break;
            case Direction.LEFT_DIRECTION:
              x = x - 1;
              break;
          }
        }
       
        private void turn(int step) {
          direction = direction + step;
          if (direction > Direction.MAX_DIRECTION_STATE) direction = Direction.MIN_DIRECTION_STATE;
          if (direction < Direction.MIN_DIRECTION_STATE) direction = Direction.MAX_DIRECTION_STATE;
        }  
    }


</script>




<p>
    А вот и история о трех муравьях:
</p>


<p><canvas style="width: 400px; height: 400px;" id="mycanvas" class="canvas"></canvas></p>

<p>
    И для увеличение объема написанно текста - код на processing:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">final</span> <span class="kr">int</span> <span class="nx">WIDHT</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'><span class="kr">final</span> <span class="kr">int</span> <span class="nx">HEIGTH</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'><span class="kr">final</span> <span class="nx">color</span> <span class="nx">BLACK</span> <span class="o">=</span> <span class="nx">color</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="kr">final</span> <span class="nx">color</span> <span class="nx">WHITE</span> <span class="o">=</span> <span class="nx">color</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">int</span> <span class="nx">frameRateValue</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">centerX</span> <span class="o">=</span> <span class="nx">WIDHT</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">centerY</span> <span class="o">=</span> <span class="nx">HEIGTH</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">direction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">Ant</span> <span class="nx">ant1</span><span class="p">,</span> <span class="nx">ant2</span><span class="p">,</span> <span class="nx">ant3</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">frameRate</span><span class="p">(</span><span class="nx">frameRateValue</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">size</span><span class="p">(</span><span class="nx">WIDHT</span><span class="p">,</span> <span class="nx">HEIGTH</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">background</span><span class="p">(</span><span class="nx">BLACK</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ant1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">(</span><span class="nx">centerX</span><span class="p">,</span> <span class="nx">centerY</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ant2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ant3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">void</span> <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">ant1</span><span class="p">.</span><span class="nx">step</span><span class="p">();</span>
</span><span class='line'>   <span class="nx">ant2</span><span class="p">.</span><span class="nx">step</span><span class="p">();</span>
</span><span class='line'>   <span class="nx">ant3</span><span class="p">.</span><span class="nx">step</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">class</span> <span class="nx">Direction</span> <span class="p">{</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">UP_DIRECTION</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">RIGTH_DIRECTION</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">DOWN_DIRECTION</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">LEFT_DIRECTION</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">MAX_DIRECTION_STATE</span> <span class="o">=</span> <span class="nx">LEFT_DIRECTION</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">MIN_DIRECTION_STATE</span> <span class="o">=</span> <span class="nx">UP_DIRECTION</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">LEFT_STEP_ROTATE</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">RIGTH_STEP_ROTATE</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">class</span> <span class="nx">Ant</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kr">private</span> <span class="kr">int</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">direction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Ant</span><span class="p">(</span><span class="kr">int</span> <span class="nx">x</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Ant</span><span class="p">(</span><span class="kr">int</span> <span class="nx">x</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">y</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="o">=</span> <span class="nx">direction</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">step</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">color</span> <span class="nx">currentColor</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">currentColor</span> <span class="o">==</span> <span class="nx">BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">WHITE</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">turn</span><span class="p">(</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT_STEP_ROTATE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">currentColor</span> <span class="o">==</span> <span class="nx">WHITE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">BLACK</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">turn</span><span class="p">(</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGTH_STEP_ROTATE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">move</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">private</span> <span class="k">void</span> <span class="nx">move</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">WIDHT</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">WIDHT</span><span class="p">)</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">HEIGTH</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">HEIGTH</span><span class="p">)</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">UP_DIRECTION</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGTH_DIRECTION</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">DOWN_DIRECTION</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT_DIRECTION</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">private</span> <span class="k">void</span> <span class="nx">turn</span><span class="p">(</span><span class="kr">int</span> <span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">direction</span> <span class="o">=</span> <span class="nx">direction</span> <span class="o">+</span> <span class="nx">step</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">direction</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MAX_DIRECTION_STATE</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">direction</span> <span class="o">=</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MIN_DIRECTION_STATE</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">direction</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MIN_DIRECTION_STATE</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">direction</span> <span class="o">=</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MAX_DIRECTION_STATE</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
