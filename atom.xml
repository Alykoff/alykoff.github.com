<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[alykoff.github.io]]></title>
  <link href="http://Alykoff.github.io/atom.xml" rel="self"/>
  <link href="http://Alykoff.github.io/"/>
  <updated>2013-06-23T15:42:06+04:00</updated>
  <id>http://Alykoff.github.io/</id>
  <author>
    <name><![CDATA[Alykoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java core. 54 вопроса]]></title>
    <link href="http://Alykoff.github.io/blog/2013/06/22/java-core-54-voprosa/"/>
    <updated>2013-06-22T16:58:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/06/22/java-core-54-voprosa</id>
    <content type="html"><![CDATA[<style type="text/css">
.answer {
	padding:		0 0 10px 20px;
    border-left:	1px dashed rgb(173, 162, 162);
    margin:			10px 0 20px 0;
}

</style>
<p>
	54 вопроса на знание  java core. Как-то мне пришлось на эти вопросы ответить. Надеюсь я нигде не налажал )
</p>
<ol>
<li>
        <div class="question">
                Что такое класс <code>Object</code>? Какие в нем есть методы?
        </div>
        <div class="answer">
                Класс <code>Object</code> - это базовый класс. Для каждого класса <code>Object</code> - супер класс. Все объекты, включая массивы имплементируют методы этого класса.
                В нем присутствуют методы:
                <ul>
                        <li>
                                <code>boolean equals(Object o)</code>
                        </li>
                        <li>
                                <code>void finalize()</code> // вызывается сборщиком мусора, когда gc определил, что ссылок на объект больше нет.
                        </li>
                        <li>
                                <code>Class&lt?&gt getClass()</code> //возвращает в рантайме класс данного объекта.
                        </li>
                        <li>
                                <code>int hashCode()</code>
                        </li>
                        <li>
                                <code>void notify()</code> // просыпается одни поток, который ждет на &#8220;мониторе&#8221; данного объекта.
                        </li>
                        <li>
                                <code>void notifyAll()</code> // просыпаются все потоки, которые ждут на &#8220;мониторе&#8221; данного объекта.
                   		</li>
                   		<li>
                                <code>String toString()</code>
	                    </li>
	                    <li>
                                <code>void wait()</code> // Приводит данный поток в ожидание, пока другой поток не вызовит <code>notify()</code> или <code>notifyAll()</code> методы для этого объекта.
	                    </li>
	                   	<li>
                                <code>void wait(long timeout)</code> // Приводит данный поток в ожидание, пока другой поток не вызовет <code>notify()</code> или <code>notifyAll()</code> для этого метода, или пока не исчет указанный промежуток времени.
                   		</li>
                   		<li>
                                <code>void  wait(long timeout, int nanos)</code> // nanos - дополнительное время в наносекундах.
                   		</li>
                   		<li>
                                <code>Object clone()</code> // create and returns a copy of this object.
                   		</li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                Что такое метод <code>equals</code>. Чем он отличается от операции <code>==</code>.
        </div>
        <div class="answer">
                Метод, определенный в <code>Object</code>, который служит для сравнение объектов на равенство. При сравнение объектов при помощи <code>==</code> идет сравнение по ссылкам. При сравнении по equals идет сравнение по состояниям объектов (реализация метода equals для нового созданного класса ложится на плечи разработчиков).
                <ul>
                        <li>
                                Причем равенство должно работать в обе стороны.
                        </li>
                        <li>
                                Должно выполняться условие транзитивности.
                        </li>
                        <li>
                                Для одних и тех же экземпляров результат работы метода должен быть всегда одинаков.
                        </li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                 Если вы хотите переопределить <code>equals</code>, какие условия должны удовлетворяться для переопределенного метода?
        </div>
        <div class="answer">
                <code>См. 2)</code>. Так же должно выполняться условие, что возвращаемое значение работы метода <code>hashCode()</code> для объектов равных относительно метода <code>equals()</code> должен быть одинаковым.
        </div>
</li>
<li>
        <div class="question">
                Если <code>equals</code> переопределен, есть ли какие-либо другие методы, которые следует переопределить?
        </div>
        <div class="answer">
                Да, есть. <code>hashCode()</code>. Для того, чтобы поддержать общий контракт.
        </div>
</li>
<li>
        <div class="question">
                Для чего нужен метод <code>hashCode</code>?
        </div>
        <div class="answer">
                Этот метод используется для хэш таблиц, таких как <code>HashMap</code>.
                Контракт:
                <ul>
                        <li>
                                Когда метод <code>hashCode()</code> последовательно вызывают на одном и том же объекте, метод должен возвращать в этом случае одни и теже значения, при условии, что никакая информация, которая используется в <code>equals()</code> при сравнении не изменилась. Возвращаемый хэш код может быть различным в различных запущенных приложениях.
                        </li>
                        <li>
                                Два объекта равные по <code>equals()</code> должны возвращать одинаковый <code>hashCode()</code>.
                        </li>
                        <li>
                                Не обязательно, что объекты не равные по <code>equals()</code> должны возвращать разные <code>hashCode()</code>.
                        </li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                Какая связь между <code>hashCode</code> и <code>equals</code>?
        </div>
        <div class="answer">
                <code>См 5)</code>
        </div>
</li>
<li>
        <div class="question">
                Каким образом реализованы методы <code>hashCode</code> и <code>equals</code> в классе <code>Object</code>?
        </div>
        <div class="answer">
                В классе <code>Object</code> метод equals производит сравнение по ссылке, метод <code>hashCode()</code> генерироет hash при помощи нативного кода из адреса ссылки.
        </div>
</li>
<li>
        <div class="question">
                 Что будет, если переопределить <code>equals</code> не переопределяя <code>hashCode</code>? Какие могут возникнуть проблемы?
        </div>
        <div class="answer">
                 Нарушится контракт. Классы и методы, которые использовали правила этого контракта могут некореектно работать. Так в для объекта <code>HashMap</code> это может привести к тому, что пара, которая была помещена в мапу возможно не будет найдена в ней при обращении к мапе, если использует новый экземпляр ключа.
        </div>
</li>
<li>
        <div class="question">
                Есть ли какие-либо рекомендации о том, какие поля следует использовать при подсчете <code>hashCode</code>?
        </div>
        <div class="answer">
                Те, которые используют при определении метода <code>equals()</code>.
                Хэш код должен быть равномерно распределен на области возможных принимаемых значений.
        </div>
</li>
<li>
        <div class="question">
                Как вы думаете, будут ли какие-то проблемы, если у объекта, который используется в качестве ключа в hashMap изменится поле, которое участвует в определении hashCode?
        </div>
        <div class="answer">
                Будут. При обращении по ключу, мы может не найти значение.
        </div>
</li>
<li>
        <div class="question">
                Какие модификаторы доступа в <code>Java</code> вы знаете?
        </div>
        <div class="answer">
        		<ul>
        			<li>
                		<code>private</code>, 
                	</li>
        			<li>
        				<code>protected</code>,
        			</li>
        			<li>
        				<code>package-private (default)</code>, 
        			</li>
        			<li>
        				<code>public</code>.
        			</li>
        		</ul>
        </div>
</li>
<li>
        <div class="question">
                Какой из модификаторов более строгий: <code>protected</code> или <code>package-private</code>?
        </div>
        <div class="answer">
                <code>package-private</code>. Поле с <code>package-private</code> уровнем доступа будет видно только в данном пакете всем классам.Тогда как protected видно для наследников данного класса, а так же для классов находящихся в данном пакете.
        </div>
</li>
<li>
        <div class="question">
                Если у класса-родителя есть метод, объявленный как <code>private</code>, может ли наследник расширить его видимость? А если <code>protected</code>? А сузить видимость?
        </div>
        <div class="answer">
                Действует общий принцип: расширять видимость можно, сужать нельзя. <code>Private</code> методы видны только внутри класса, для потомков они не видны. Поэтому  их и расширить нельзя.
        </div>
</li>
<li>
        <div class="question">
                Что означает ключевое слово <code>final</code>?
        </div>
        <div class="answer">
                Может быть применено к полям, методам или классам. В зависимости к какой сущности приложено данное ключевое слово - будет и различный смысл в его применении.
                <ul>
                        <li>
                                Для класса. Класс помеченный при помощи <code>final</code> не может иметь наследников.
                        </li>
                        <li>
                                Для метода. Метод помеченный при помощи <code>final</code> не может быть переопределен в классах наследниках.
                        </li>
                        <li>
                                Для поля. Поле помеченное при помощи слова <code>final</code> не может изменить свое значение после инициализации (инициализируется либо при описании, либо в конструкторе/статическом блоке).
                        </li>
                        <li>
                                Значение локальных переменных, а так же параметров метода помеченных при помощи слова <code>final</code> не могут быть изменены после присвоения.
                        </li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                Имеет ли смысл объявлять метод <code>private</code> <code>final</code>?
        </div>
        <div class="answer">
                Нет, такой метод не виден для наследников, а значит не может быть ими переопределен.
        </div>
</li>
<li>
        <div class="question">
                Какие особенности инициализации <code>final</code> переменных?
        </div>
        <div class="answer">
                <code>см 14)</code>
        </div>
</li>
<li>
        <div class="question">
                Что будет, если единственный конструктор класса объявлен как <code>final</code>?
        </div>
        <div class="answer">
                К конструктору не применимо ключевое слово <code>final</code>.
        </div>
</li>
<li>
        <div class="question">
                Что означает ключевое поле <code>static</code>?
        </div>
        <div class="answer">
                То, что метод, внутренний класс или поле является экземплярами класса. Так же существует <code>static блок</code>, который выполняется при загрузке класса.
                <br />
                И немного про <code>static-блоки</code>, <code>init-блоки</code> и <code>конструкторы</code> и как они вызываются учитывая иерархию:
                <ul>
                        <li>
                                <code>static-блок</code> вызывается при загрузке класса, поэтому <code>static-блок</code> super-класса будет вызван раньше, чем <code>static-блок</code> наследника.
                        </li>
                        <li>
                                Вызов других конструкций следующий (при создании экземпляра): <code>init-блок</code> super-класса, конструктор super-класса, <code>init-блок</code> наследника, конструктор наследника. Т.к. <code>init-блок</code> всегда выполняется перед конструктором, а перед вызовом контруктора наследника всегда вызывается конструктор super-класса.
                        </li>
                        <li>
                                <code>init</code>/<code>static</code> блоки в рамках одного класса вызываются в последовательности определения.
                        </li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                К каким конструкциям Java применим модификатор <code>static</code>?
        </div>
        <div class="answer">
                <ul>
                        <li>
                                К методу.
                        </li>
                        <li>
                                К внутреннему классу.
                        </li>
                        <li>
                                К полю.
                        </li>
                        <li>
                                К импортируемы классам (с 5-ой java).
                        </li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                Что будет, если в <code>static блоке</code> кода возникнет исключительная ситуация?
        </div>
        <div class="answer">
                Если в явном виде написать любое исключение в <code>static-блоке</code>, то компилятор не скомпилирует исходники. Это все от того, что компилятор умный. В остальном, взаимодействие с исключениями такое же как и в любом другом месте. Если unchecked исключение вывалится в <code>static-блоке</code>, то класс не будет инициализирован.
                <br />
                Какой эксепшн вываливается наружу при ошибке в инит/статик блоке?
                Для <code>static</code>:
                <ul>
                        <li>
                                <code>java.lang.ExceptionInInitializerError</code> - если исключение наследуется от <code>RuntimeException</code>.
                        </li>
                </ul>
                Для init:
                <ul>
                        <li>
                                <code>exception</code>, который и вызвал исключение, если он наследуется от <code>RuntimeException</code>.
                        </li>
                </ul>
                Верно для <code>static</code> и <code>init</code>:
                <ul>
                        <li>
                                <code>java.lang.Error</code> - если исключение вызвано <code>Error</code>.
                        </li>
                        <li>
                                <code>java.lang.ThreadDeath</code> - смерть потока. Ничего не вываливается.
                        </li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                Можно ли перегрузить <code>static метод</code>?
        </div>
        <div class="answer">
                 Перезагрузить можно, переописать нельзя.
        </div>
</li>
<li>
        <div class="question">
                Что такое статический класс, какие особенности его использования?
        </div>
        <div class="answer">
                Это вложенный класс, который может обращаться только к статическим полям обертывающего его класса, в том числе и приватным. Доступ к нестатическим полям обрамляющего класса может быть осуществлен только через ссылку на экземпляр обрамляющего объекта.
        </div>
</li>
<li>
        <div class="question">
                Какие особенности инициализации <code>final</code> <code>static</code> переменных?
        </div>
        <div class="answer">
                Переменный должны быть инициализированы во время объявления или в <code>static блоке</code>.
        </div>
</li>
<li>
        <div class="question">
                Какие типы классов бывают в java (вложенные… и.т.д.)
        </div>
        <div class="answer">
                <ul>
                        <li>
                                Обычные классы (<code>Top level classes</code>)
                        </li>
                        <li>
                                Интерфейсы (<code>Interfaces</code>)
                        </li>
                        <li>
                                Перечисления (<code>Enum</code>)
                        </li>
                        <li>
                                Статические вложенные классы (<code>Static nested classes</code>)
                                <ul>
                                        <li>
                                        Есть возможность обращения к внутренним статическим полям и методам класса обертки.
                                </li>
                                <li>
                                        Внутренние статические интерфейсы могут содерать только статические мотоды.
                                </li>
                        </ul>
                        </li>
                        <li>
                                Внутренние классы-члены (<code>Member inner classes</code>)
                                <ul>
                                        <li>
                                                Есть возможность обращения к внутренним полям и методам класса обертки.
                                        </li>
                                        <li>
                                        Не может иметь статических объявлений.
                                </li>
                                <li>
                                        Нельзя объявить таким образом интерфейс. А если его объявить без идентификатора <code>static</code>, то он автоматически будет добавлен.
                                </li>
                                <li>
                                        Внутри такого класса нельзя объявить перечисления.
                                </li>
                                <li>
                                        Если нужно явно получить <code>this</code> внешнего класса - <code>OuterClass.this</code>
                                </li>
                        </ul>
                        </li>
                        <li>
                                Локальный класс (<code>Local inner classes</code>)
                                <ul>
                                <li>
                                        Видны только в пределах блока, в котором объявлены.
                                </li>
                                <li>
                                        Не могут быть объявлены как <code>private</code>/<code>public</code>/<code>protected</code> или <code>static</code> (по этой причине интерфейсы нельзя объявить локально).
                                </li>
                                <li>
                                        Не могут иметь внутри себя статических объявлений (полей, методов, классов).
                                </li>
                                <li>
                                        Имеют доступ к полям и методам обрамляющего класса.
                                </li>
                                <li>
                                        Можно обращаться к локальным переменным и параметрам метода, если они объявлены с модификатором <code>final</code>.
                                </li>
                        </ul>
                    </li>
                    <li>
                    Анонимные классы (<code>Anonymous inner classes</code>)
                        <ul>
                                <li>
                                        Локальный класс без имени.
                                </li>
                        </ul>
                        </li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                Каким образом из вложенного класса получить доступ к полю внешнего класса.
        </div>
        <div class="answer">
                Если вложенный класс не статический и поле не статическое, то можно просто обратиться к этому полю из внутреннего класса, если только у внутреннего класса не существует поля с таким же литералом, в этом случае нужно обраться через ссылку на внешний класс где-то так - <code>OuterClass.this</code>
        </div>
</li>
<li>
        <div class="question">
                Какие особенности создания вложенных классов: простых и статических.
        </div>
        <div class="answer">
                <code>См 24)</code>
        </div>
</li>
<li>
        <div class="question">
                Каким образом можно обратиться к локальной переменной метода из анонимного класса, объявленного в теле этого метода? Есть ли каке-нибудь ограничения для такой переменной?
        </div>
        <div class="answer">
                По его литералу. Если переменная является <code>final</code>, то только в этом случае к ней можно обратиться.
        </div>
</li>
<li>
        <div class="question">
                Какие вы знаете способы запустить некоторое действие в отдельном потоке?
        </div>
        <div class="answer">
            <figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span><span class="cm">/* blah */</span><span class="o">}</span>
</span><span class='line'><span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>			
</span></code></pre></td></tr></table></div></figure>
			<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span><span class="cm">/* blah */</span><span class="o">}</span>
</span><span class='line'><span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>
        	<br />
        	Наследовать <code>Thread</code> будет верным лишь в случае создания другой имплементации потока. Для выполнения какой-нибудь задачи в отдельном потоке использование наследования будет идеологически неверным.
        </div>
</li>
<li>
        <div class="question">
                Какие вы знаете способы прекратить выполнение потока?
        </div>
        <div class="answer">
                <ul>
                        <li>
                                <code>Thread.stop();</code> // depreceted
                        </li>
                        <li>
                                При вызове метода <code>interrupt()</code>, флаг прерывания устанавливается в true, после чего в потоке должен быть реализован метод его завершения (выход из метода <code>run()</code>).
                        </li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                 Какие ключевые слова Java, связанные с многопоточностью Вы знаете?
        </div>
        <div class="answer">
                <ul>
                        <li>
                                <code>valotile</code> - помечает объект, чтобы он не кэшировался отдельно для каждого потока. Все запросы к переменной будут направляться непосредственно в память.
                        </li>
                        <li>
                                <code>syhcronized</code>.
                        </li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                Для чего используется ключевое слово <code>syhcronized</code>?
        </div>
        <div class="answer">
                Для того, чтобы код в этом блоке выполнялся в один момент времени только одним потоком.
        </div>
</li>
<li>
        <div class="question">
                Есть некоторый метод, который исполняет операцию <code>i++</code>. Переменная <code>i</code> типа <code>int</code>. Предполагается, что код будет исполнятся в многопоточной среде. Следует ли синхронизировать блок?
        </div>
        <div class="answer">
                Следует. Инкремент/декремент - не атомарные операции.
        </div>
</li>
<li>
        <div class="question">
                Что служит в качестве <code>mutex</code>, если метод объявлен <code>synchronized</code>?
        </div>
        <div class="answer">
                Экземпляр данного класса.
        </div>
</li>
<li>
        <div class="question">
                Можно ли вызвать в разных потоках два <code>synchronized</code> метода одного и того же объекта?
        </div>
        <div class="answer">
                Оновременно нельзя. Т.к. методы объявлены как <code>synchronized</code>, то одноременно оперировать с объектом может только один поток, который получил <code>lock объекта</code>. Поэтому: если <code>synchronized</code> метод выполняется в первом потоке, чтобы выполнить какой-либо <code>synchronized</code> метод объекта во втором потоке, второй поток будет вынужден ждать пока станет доступен <code>lock объекта</code>.
        </div>
</li>
<li>
        <div class="question">
                Что используется в качестве mutex, если метод объявлен <code>static</code> <code>synchronized</code>? Можно ли создавать новые экземпляры класса, пока выполняется <code>static</code> <code>synchronized</code> метод?
        </div>
        <div class="answer">
                Монитор класса, который контролирует доступ ко всему синхронизированному статическому коду. Можно
        </div>
</li>
<li>
        <div class="question">
                Объясните, что такое <code>deadlock</code>? Приведите пример кода, который демонстрирует <code>deadlock</code>
        </div>
        <div class="answer">
                Ситуация, когда несколько потоков находятся в состоянии бесконечного ожидания в следствии ожидания освобождения ресурсов, которые сами же и занимают.
                <figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Entity</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">method1</span><span class="o">(</span><span class="n">Entity</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">entity</span><span class="o">.</span><span class="na">method2</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">method2</span><span class="o">(</span><span class="n">Entity</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Entity</span> <span class="n">en1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entity</span><span class="o">();</span>
</span><span class='line'>                <span class="n">Entity</span> <span class="n">en2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entity</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                                <span class="n">en1</span><span class="o">.</span><span class="na">method1</span><span class="o">(</span><span class="n">en2</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                                <span class="n">en2</span><span class="o">.</span><span class="na">method1</span><span class="o">(</span><span class="n">en1</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>
        </div>
</li>
<li>
        <div class="question">
                Для чего используется ключевое слово <code>volatile</code>?
        </div>
        <div class="answer">
                Не используется кэш (имется ввиду область памети в которой <code>JVM</code> может сохранять локальную копию переменной, чтобы уменьшить время обращения к переменной) при обращении к полю.
        </div>
</li>
<li>
        <div class="question">
                Для чего используется ключевое слово <code>transient</code>?
        </div>
        <div class="answer">
                Для указание того, что при сериализации/десериализации данное поле не нужно сериализовать/десериализовывать.
        </div>
</li>
<li>
        <div class="question">
                Расскажите о методах <code>wait</code>, <code>notify</code>, <code>notifyAll</code>. Как они применяются, когда, зачем нужны?
        </div>
        <div class="answer">
                <ul>
                        <li>
                                <code>wait()</code> - Приводит поток в ожидание, пока другой поток не вызовит <code>notify()</code> или <code>notifyAll()</code> методы для этого объекта. При этом все эти методы должны быть вызваны в блоке synchronized.
                        </li>
                        <li>
                                <code>notify()</code> - просыпается одни поток, который ждет на &#8220;мониторе&#8221; данного объекта.
                        </li>
                        <li>
                                <code>notifyAll()</code> - просыпаются все потоки, которые ждут на &#8220;мониторе&#8221; данного объекта.
                        </li>
                        Эти методы должны вызываться в <code>блоке synchronized</code>.
                        <br />
                        Применяются для организации работы потоков. Используется один объект, который выполняет управляющую.
                        <br />
                        Именно у него и вызываются эти методы.
                        <br />
                        При вызове одного из этих методов блокировка на объект снимается.
                </ul>
        </div>
</li>
<li>
        <div class="question">
                Какие особенности использования метода <code>wait</code>? При каких условиях поток может выйти из режима ожидания?
        </div>
        <div class="answer">
                Так же <code>см 39)</code>.
                <ul>
                        <li>
                                Если задан параметр/параметры, определяющий время и если поток не будет разбужен в течении этого времени при помощи методов <code>notify()</code> или <code>notifyAll()</code>, тогда он будет разбужен по прошествии указанного времени.
                        </li>
                        <li>
                                Если не задан параметр/параметры, определяющие время, то поток будет разбужен только при помощи методов <code>notify()</code> или <code>notifyAll()</code>.
                        </li>
                </ul>
        </div>
</li>
<li>
        <div class="question">
                Предположим в методе run возник <code>RuntimeException</code>, который не был пойман. Что случится с потоком? Есть ли способ узнать о том, что <code>Exception</code> произошел (не заключая все тело <code>run</code> в <code>блок try-catch</code>)? Есть ли способ восстановить работу потока после того как это произошло?
        </div>
        <div class="answer">
                Поток будет остановлен. Нет. Нет.
        </div>
</li>
<li>
        <div class="question">
                Какие стандартные инструменты Java вы бы использовали для реализации пула потоков?
        </div>
        <div class="answer">
                <code>LinkedList</code>, <code>synchronized</code>, <code>wait()</code>, <code>notify()</code>/<code>notifyAll()</code>
        </div>
</li>
<li>
        <div class="question">
                Какие виды исключений в Java вы знаете, чем они отличаются?
        </div>
        <div class="answer">
                <code>checked</code>/<code>unchecked</code>. Если <code>checked</code> исключение не отлавливается, то это приводит к ошибке на этапе компиляции. <code>Unchecked</code> исключение - то, которое разработчик не должен допустить, т.к. имеет для этого возможность.
                <br />
                Если исключение потомок <code>RuntimeException</code> или <code>Error</code>, то это <code>unchecked</code> исключение. Если исключение потомок Exception (и не потомок <code>RuntimeException</code>), то это <code>checked</code> исключение.
        </div>
</li>
<li>
        <div class="question">
                 Назовите несколько классов из вершины иерархии исключений в Java.
        </div>
        <div class="answer">
                <code>Throwable</code>, <code>Error</code>, <code>Exception</code>, <code>RuntimeException</code>.
        </div>
</li>
<li>
        <div class="question">
                Что такое <code>Error</code>? В каком случае используется <code>Error</code>. Приведите пример <code>Error’а</code>.
        </div>
        <div class="answer">
                Используется для сигнализирования того, что произел сбой внутри <code>JVM</code>. Пример класс <code>ThreadDeath</code>.
        </div>
</li>
<li>
        <div class="question">
                Какая конструкция используется в Java для обработки исключений?
        </div>
        <div class="answer">
                <code>try - catch - finaly</code>
        </div>
</li>
<li>
        <div class="question">
                Возможно ли использование <code>блока try-finally</code> (без <code>catch</code>)?
        </div>
        <div class="answer">
                Да, если возникающее исключение не <code>checked</code> или <code>checked</code> исключение будет передано дальше по иерархии, или если оно будет поймано в ещё одном <code>блоке try</code>.
        </div>
</li>
<li>
        <div class="question">
                Предположим, есть <code>блок try-finally</code>. В <code>блоке try</code> возникло исключение и выполнение переместилось в <code>блок finally</code>. В <code>блоке finally</code> тоже возникло исключение. Какое из двух исключений “выпадет” из <code>блока try-finally</code>? Что случится со вторым исключением?
        </div>
        <div class="answer">
                Выпадает, то есть, не передается по иерархии вызовов первое исключение. И оно просто не попадет в иерархию вызовов.
        </div>
</li>
<li>
        <div class="question">
                Всегда ли исполняется <code>блок finally</code>?
        </div>
        <div class="answer">
                Только если поток ещё исполняется и <code>JVM</code> ещё работает к этому моменту.
        </div>
</li>
<li>
        <div class="question">
                Могли бы вы придумать ситуацию, когда <code>блок finally</code> не будет выполнен?
        </div>
        <div class="answer">
                Мог бы.
                <figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="n">finaly</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;42&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>
   
        </div>
</li>
<li>
        <div class="question">
                Предположим, есть метод, который может выбросить <code>IOException</code> и <code>FileNotFoundException</code> в какой последовательности должны идти <code>блоки catch</code>? Сколько <code>блоков catch</code> будет выполнено?
        </div>
        <div class="answer">
                Вначеле <code>FileNotFoundException</code> затем <code>IOException</code>. Один.
        </div>
</li>
<li>
        <div class="question">
                Предположим вам необходимо создать свой собственный класс <code>Exception</code>. Какими мотивами вы будете руководствоваться при выборе типа исключения: <code>checked</code>/<code>unchecked</code>?
        </div>
        <div class="answer">
                Если исключение возникло из-за того, что клиент нарушал контракт, то это unchecked exeption. Если же исключение возникло по какой-нибудь другой причине, то это <code>checked</code> exeption.
        </div>
</li>
<li>
        <div class="question">
                Что такое <code>finalize</code>? Зачем он нужен? Что Вы можете рассказать о сборщике мусора и алгоритмах его работы.
        </div>
        <div class="answer">
                Метод <code>finalize()</code> вызывается перед тем, как объект будет удален <code>gc</code>. Существует много различных реализаций <code>gc</code>. Основа работы следующая, <code>gc</code> помечает объекты на которых больше не ссылаются другие объекты для их удаления. Затем на одном из проходов помеченные объекты удаляются.
                <br />
                Вызов <code>finalize()</code> не гарантируется, т.к. приложение может быть завершено до того, как будет запущена ещё одна сборка мусора. Да, можно отменить сборку объекта с помощью метода <code>finalize()</code>, присвоив его ссылку какому-то статистическому мето
        </div>
</li>
<li>
        <div class="question">
                Почему метод <code>clone</code> объявлен как <code>protected</code>? Что необходимо для реализации клонирования?
        </div>
        <div class="answer">
                Это сигнализирует о том, что хоть метод и есть в классе <code>Object</code>, но если им разработчик желает воспользоваться, то его нужно переопределить. Для этого нужно реализовать интерфейс <code>Clonable</code>, чтобы соблюсти контракт.
        </div>
</li>
</ol>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Идеальный муравей]]></title>
    <link href="http://Alykoff.github.io/blog/2013/06/01/idiealnyi-muravei/"/>
    <updated>2013-06-01T19:43:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/06/01/idiealnyi-muravei</id>
    <content type="html"><![CDATA[<p>
	Муравьи. Какие же они бывают разные! И черные, и красные, и черные маленькие, и черные большие и&#8230;Ох, сколько же вас! Давным-давно мне очень нравились муравьи. С ними было неплохо, можно было наблюдать их локальные войны. Отчего-то (в какой-то степени это и ясно) муравьи одного цвета не любят муравьев другого цвета. Но в данном случае у нас муравьи все одного цвета - черно-белого. Да-да, черно-белого. (На самом деле это <a href="http://ru.wikipedia.org/wiki/%D0%9C%D1%83%D1%80%D0%B0%D0%B2%D0%B5%D0%B9_%D0%9B%D1%8D%D0%BD%D0%B3%D1%82%D0%BE%D0%BD%D0%B0">муравьи Лэнгтона</a>). В конкретном случае муравьи работают только с черным и белым цветом, оттого я их так и назвал. А что ещё они умеют? А вот что:
	<ul style="margin-left:30px;">
		<li>
			Жить на клеточном поле занимая при этом одну клетку.
		</li>
		<li>
	    	При нахождении на черной клетке — поворачивать на 90 градусов влево, изменяя при этом цвет клетки на противоположный и делая шаг вперед на следующую клетку.
		</li>
	    <li>
    		При нахождении на белой клетке — поворачивать на 90° вправо, изменяя цвет клетки на противоположный и делая шаг вперед на следующую клетку.
		</li>
    </ul>
</p>
<p>
	Казалось бы что муравей подчиняесь вполня четким правилам ведет себя хаотично. Но в итоге это оказывается не так. Через некоторое время, если муравью никто не мешал он начинает строить дорожку с цикличностью в 104 шага. И так до бесконечности.
</p>
<p>
	Черное и белое. Где правда, а где вымысел? Где фон, а где узор? Забавно представить все с другой стороны. Например, как-будто муравей наоборот препятствует изменению цветов поля, а его отсутствие не уберегает поле от изменения цвета.
</p>
<script src="http://Alykoff.github.io/javascripts/libs/processing-1.4.1.min.js"></script>
<script type="text/processing" data-processing-target="mycanvas">
    final int WIDHT = 200;
    final int HEIGTH = 200;
    final color BLACK = color(0, 0, 0);
    final color WHITE = color(255, 255, 255);
     
    int frameRateValue = 300;
    int centerX = WIDHT / 2;
    int centerY = HEIGTH / 2;
    int direction = 0;
    Ant ant1, ant2, ant3;
     
     
    void setup() {
      frameRate(frameRateValue);
      size(WIDHT, HEIGTH);
      background(BLACK);
      ant1 = new Ant(centerX, centerY, 0);
      ant2 = new Ant(50, 50, 0);
      ant3 = new Ant(50, 150, 3);
    }
     
    void draw() {
       ant1.step();
       ant2.step();
       ant3.step();
    }
     
    class Direction {
       static final int UP_DIRECTION = 0;
       static final int RIGTH_DIRECTION = 1;
       static final int DOWN_DIRECTION = 2;
       static final int LEFT_DIRECTION = 3;
       static final int MAX_DIRECTION_STATE = LEFT_DIRECTION;
       static final int MIN_DIRECTION_STATE = UP_DIRECTION;
       static final int LEFT_STEP_ROTATE = -1;
       static final int RIGTH_STEP_ROTATE = 1;
    }
     
    class Ant {
        private int x, y, direction;
       
        Ant(int x, int y) {
          this.x = x;
          this.y = y;
          this.direction = 0;
        }
       
        Ant(int x, int y, int direction) {
          this.x = x;
          this.y = y;
          this.direction = direction;      
        }
       
        void step() {
          color currentColor = get(x, y);
          if (currentColor == BLACK) {
            set(x, y, WHITE);
            turn(Direction.LEFT_STEP_ROTATE);
          } else if (currentColor == WHITE) {
            set(x, y, BLACK);
            turn(Direction.RIGTH_STEP_ROTATE);
          }
          move();
        }
       
        private void move() {
          if (x < 0) x = WIDHT;
          else if (x > WIDHT) x = 0;
          if (y < 0) y = HEIGTH;
          else if (y > HEIGTH) y = 0;
          switch(direction) {
            case Direction.UP_DIRECTION:
              y = y - 1;
              break;
            case Direction.RIGTH_DIRECTION:
              x = x + 1;
              break;
            case Direction.DOWN_DIRECTION:
              y = y + 1;
              break;
            case Direction.LEFT_DIRECTION:
              x = x - 1;
              break;
          }
        }
       
        private void turn(int step) {
          direction = direction + step;
          if (direction > Direction.MAX_DIRECTION_STATE) direction = Direction.MIN_DIRECTION_STATE;
          if (direction < Direction.MIN_DIRECTION_STATE) direction = Direction.MAX_DIRECTION_STATE;
        }  
    }


</script>

<p>
	А вот и история о трех муравьях:
</p>

<canvas style="width: 400px; height: 400px;" id="mycanvas" class="canvas"></canvas>

<p>
	И для увеличение объема написанно текста - код на processing:
</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">final</span> <span class="kr">int</span> <span class="nx">WIDHT</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'><span class="kr">final</span> <span class="kr">int</span> <span class="nx">HEIGTH</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'><span class="kr">final</span> <span class="nx">color</span> <span class="nx">BLACK</span> <span class="o">=</span> <span class="nx">color</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="kr">final</span> <span class="nx">color</span> <span class="nx">WHITE</span> <span class="o">=</span> <span class="nx">color</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">int</span> <span class="nx">frameRateValue</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">centerX</span> <span class="o">=</span> <span class="nx">WIDHT</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">centerY</span> <span class="o">=</span> <span class="nx">HEIGTH</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">direction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">Ant</span> <span class="nx">ant1</span><span class="p">,</span> <span class="nx">ant2</span><span class="p">,</span> <span class="nx">ant3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">frameRate</span><span class="p">(</span><span class="nx">frameRateValue</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">size</span><span class="p">(</span><span class="nx">WIDHT</span><span class="p">,</span> <span class="nx">HEIGTH</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">background</span><span class="p">(</span><span class="nx">BLACK</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ant1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">(</span><span class="nx">centerX</span><span class="p">,</span> <span class="nx">centerY</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ant2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ant3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">ant1</span><span class="p">.</span><span class="nx">step</span><span class="p">();</span>
</span><span class='line'>   <span class="nx">ant2</span><span class="p">.</span><span class="nx">step</span><span class="p">();</span>
</span><span class='line'>   <span class="nx">ant3</span><span class="p">.</span><span class="nx">step</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Direction</span> <span class="p">{</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">UP_DIRECTION</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">RIGTH_DIRECTION</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">DOWN_DIRECTION</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">LEFT_DIRECTION</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">MAX_DIRECTION_STATE</span> <span class="o">=</span> <span class="nx">LEFT_DIRECTION</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">MIN_DIRECTION_STATE</span> <span class="o">=</span> <span class="nx">UP_DIRECTION</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">LEFT_STEP_ROTATE</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">RIGTH_STEP_ROTATE</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Ant</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">private</span> <span class="kr">int</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">direction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Ant</span><span class="p">(</span><span class="kr">int</span> <span class="nx">x</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Ant</span><span class="p">(</span><span class="kr">int</span> <span class="nx">x</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">y</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="o">=</span> <span class="nx">direction</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">void</span> <span class="nx">step</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">color</span> <span class="nx">currentColor</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">currentColor</span> <span class="o">==</span> <span class="nx">BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">WHITE</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">turn</span><span class="p">(</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT_STEP_ROTATE</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">currentColor</span> <span class="o">==</span> <span class="nx">WHITE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">BLACK</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">turn</span><span class="p">(</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGTH_STEP_ROTATE</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">move</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">private</span> <span class="k">void</span> <span class="nx">move</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">WIDHT</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="nx">WIDHT</span><span class="p">)</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">HEIGTH</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&gt;</span> <span class="nx">HEIGTH</span><span class="p">)</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">switch</span><span class="p">(</span><span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">UP_DIRECTION</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGTH_DIRECTION</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">DOWN_DIRECTION</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT_DIRECTION</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">private</span> <span class="k">void</span> <span class="nx">turn</span><span class="p">(</span><span class="kr">int</span> <span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">direction</span> <span class="o">=</span> <span class="nx">direction</span> <span class="o">+</span> <span class="nx">step</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">direction</span> <span class="o">&gt;</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MAX_DIRECTION_STATE</span><span class="p">)</span>
</span><span class='line'>      	<span class="nx">direction</span> <span class="o">=</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MIN_DIRECTION_STATE</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">direction</span> <span class="o">&lt;</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MIN_DIRECTION_STATE</span><span class="p">)</span>
</span><span class='line'>      	<span class="nx">direction</span> <span class="o">=</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MAX_DIRECTION_STATE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Мутация текста #2]]></title>
    <link href="http://Alykoff.github.io/blog/2013/05/28/mutatsiia-tieksta-number-2/"/>
    <updated>2013-05-28T00:41:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/05/28/mutatsiia-tieksta-number-2</id>
    <content type="html"><![CDATA[<p class="text">
Но никто не отозвался. Тут он взглянул на дверь в кабинет Берлиоза, бывшую рядом с передней, и тут, как говорится, остолбенел. На ручке двери он разглядел огромнейшую сургучную печать на веревке. &#8220;Здравствуйте! − рявкнул кто-то в голове у Степы. − Этого еще недоставало!&#8221; И тут Степины мысли побежали уже по двойному рельсовому пути, но, как всегда бывает во время катастрофы, в одну сторону и вообще черт знает куда. Головную Степину кашу трудно даже передать. Тут и чертовщина с черным беретом, холодной водкой и невероятным контрактом, − а тут еще ко всему этому, не угодно ли, и печать на двери! То есть кому хотите сказать, что Берлиоз что-то натворил, − не поверит, ей-ей, не поверит! Однако печать, вот она! Да-с…
</p>
<p class="text">
И тут закопошились в мозгу у Степы какие-то неприятнейшие мыслишки о статье, которую, как назло, недавно он всучил Михаилу Александровичу для напечатания в журнале. И статья, между нами говоря, дурацкая! И никчемная, и деньги-то маленькие…
</p>


<script>
$(function(){
	var paragrafsText = [],
    elements = document.getElementsByClassName('text'),
    NODE_TEXT_NAME = 
        ('innerText' in document.getElementsByTagName('html')[0]) ? 
        "innerText" : 
        "textContent", // for cross-browsing
    getCurrentTexts = function() {
        var texts = [];
        for (var i = 0, elementsLengh = elements.length; i < elementsLengh; i++) {
            var textEl = elements[i],
                text = textEl[NODE_TEXT_NAME];
            texts.push(text);
        }
        return texts;
    },
    paragrafsText = getCurrentTexts(),
    buildWordIslands = function() {
        for (var i = 0, paragrafsLength = paragrafsText.length; i < paragrafsLength; i++) {
            var wordsInParagraf = paragrafsText[i].split(' '),
                totatHtml = '',
            	wrappedWords = document.createElement('div');
                //SPACE = '&nbsp;';
            elements[i][NODE_TEXT_NAME] = '';
            for (var j = 0, wordsLength = wordsInParagraf.length; j < wordsLength; j++) {
            	var wordEl = document.createElement('span');
            	wordEl.className = 'word';
            	wordEl[NODE_TEXT_NAME] = wordsInParagraf[j];
            	wrappedWords.appendChild(wordEl);
            }
            elements[i].appendChild(wrappedWords);
        }
    };

    buildWordIslands();
});
</script>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Мутация текста #1]]></title>
    <link href="http://Alykoff.github.io/blog/2013/05/25/mutatsiia-tieksta-number-1/"/>
    <updated>2013-05-25T11:17:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/05/25/mutatsiia-tieksta-number-1</id>
    <content type="html"><![CDATA[<p class="text">
	Дверь наверху открыли и закрыли. &#8220;Он  вошел!&#8221;  -  подумал  Латунский  и
	двинулся вниз. Сердце его забилось сильно.  Вот  покинутая  швейцарская  под
	лестницей, в ней никого  нет.  Но  прежде  всего  Латунский  оглянулся,  ища
	чемодан и другие вещи. Ни чемодана, ни белья на  полу  внизу  не  было.  Вне
	всяких сомнений, их украли, пока Латунский спускался. Он сам подивился тому,
	как мало это его расстроило. Латунский шмыгнул  в  швейцарскую  и  засел  за
	грязным разбитым стеклом.
</p>
<p class="text">
	Прошло, минут десять томительного ожидания,  и  Латунскому  показалось,
	что их гораздо более прошло. За это время только один  человек  пробежал  по
	лестнице, насвистывая знаменитую песню &#8220;гоп со смыком&#8221;,  и,  судя  по  шуму,
	скрылся во втором этаже.
</p>
<script>
	$(function() {
        var dicTuple = function(letter, brakeLetter) {
                this.letter = letter;
                this.brakeLetter = brakeLetter;
        	},
        	DICTONARY = [
                new dicTuple('а', 'i'), new dicTuple('б', 'v'), new dicTuple('в', 'l'), new dicTuple('г', 'F'), new dicTuple('д', 'd'), new dicTuple('е', 'r'), new dicTuple('ё', 'I'), new dicTuple('ж', 'j'), new dicTuple('з', 'x'), new dicTuple('и', 'o'), new dicTuple('й', 'q'), new dicTuple('к', 'K'), new dicTuple('л', 'L'), new dicTuple('м', 'w'), new dicTuple('н', 'n'), new dicTuple('о', '0'), new dicTuple('п', 'R'), new dicTuple('р', 'r'), new dicTuple('с', 's'), new dicTuple('т', 't'), new dicTuple('у', 'u'), new dicTuple('ф', 'f'), new dicTuple('х', 'h'), new dicTuple('ц', 'C'), new dicTuple('ч', '2'), new dicTuple('ш', 's'), new dicTuple('щ', '8'), new dicTuple('ъ', '\\'), new dicTuple('ы', 'b'), new dicTuple('ь', '/'), new dicTuple('э', ','), new dicTuple('ю', 'Y'), new dicTuple('я', 'D')
        	],
        	MUTATE_PROBABILITY = .5,
        	elements = document.getElementsByClassName('text'),
        	NODE_TEXT_NAME = ('innerText' in document.getElementsByTagName('html')[0]) ? "innerText" : "textContent", // for cross-browsing
        	getCurrentTexts = function() {
	            var texts = [];
	            for (var i = 0, elementsLengh = elements.length; i < elementsLengh; i++) {
	                var textEl = elements[i],
	                        text = textEl[NODE_TEXT_NAME];
	                texts.push(text);
	            }
	            return texts;
	        },
        	paragrafsText = getCurrentTexts(),
        	getMutateSign = function(sign) {
        		if (Math.random() > MUTATE_PROBABILITY || (typeof sign !== 'string')) {
					return sign;
				}
				sign = sign.toLowerCase();
                for (var i = 0, lengthDictonary = DICTONARY.length; i < lengthDictonary; i++) {
                    if (DICTONARY[i].letter === sign) {
                            return DICTONARY[i].brakeLetter;
                    }
                }
                return sign;
	        },
	        mutation = function() {
	            for (var i = 0, lenghtTextEL = elements.length; i < lenghtTextEL; i++) {
	                var text = paragrafsText[i].split('');
	                var mutateText = [];
	                for (var j = 0, lenghtText = text.length; j < lenghtText; j++) {
	                        mutateText[j] = getMutateSign(text[j])
	                }
	                elements[i][NODE_TEXT_NAME] = mutateText.join('');
	            }
	        };


        setInterval(mutation, 200);
    });
</script>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Супер волны [processing]]]></title>
    <link href="http://Alykoff.github.io/blog/2013/05/10/super-wave/"/>
    <updated>2013-05-10T21:45:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/05/10/super-wave</id>
    <content type="html"><![CDATA[<p>
    &#8220;Супер волны&#8221; по мотивам Jorg Reuter&#8217;s <a href="http://stachelig.de/">SinusPlasma sketch</a>
</p>
<p>
  Поначалу я начал изучать вышеназванную SinusPlasma, причем изучаемая мною реализация была написана на Scala. Напомню, processing реализован для <acronym title="Java Virtual Machine">JVM</acronym>, а так же в виде javascript-библиотеки, которая транслирует написанный код processing&#8217;а в javascript.
</p>
<p>
  Я уже ипомянул, что использовал scala в своих экспериментах, в силу того, что мне нравится этот язык (меньше писать по сравнению с Java).
  После того как я получил результат, который был приятен моему глазу я решил портировать его на processing.js (и это было не сложно!) и вот что получилось:
</p>

<script src="http://Alykoff.github.io/javascripts/libs/processing-1.4.1.min.js"></script>
<script type="text/processing" data-processing-target="mycanvas">
    int SCREENWIDTH = 220;
    int SCREENHEIGHT = 120;
    int GRADIENTLEN = 150;// magnifair
    int SPEEDUP = 1; // changes speed  
    int SWINGLEN = GRADIENTLEN;  // magnitude moving blocks (color diversity)
    int SWINGMAX = GRADIENTLEN * 3 - 1; // this param affect to color sheme (then his more then colors more)
    int[] colorGrad = new int[GRADIENTLEN];
    int minX = 0;
    int maxX = 0;
    int minY = 0;
    int maxY = 0;
    void setup () {
      background(200);
      size( SCREENWIDTH, SCREENHEIGHT);   
      makeGradient();
      setMaxMinX();
      setMaxMinY();
    }
    void draw () {
      loadPixels();
      int i = 0;
      int t = frameCount * SPEEDUP;
      for (int y = minY; y < maxY; y++) {
          for (int x = minX; x < maxX; x++) {
            set(x, y, gradient(int(x*x/4) + int(y*y/4) + t));
            i = i + 1;
          }
      }
      updatePixels();
    }
    void makeGradient() {
      int arrlen = GRADIENTLEN;
      int rf = 4;
      int gf = 2;
      int bf = 1;
      int rd = arrlen;
      int gd = arrlen / gf;
      int bd = arrlen / bf / 2;
      for (int i = 0; i < arrlen; i++) {
        int r = cos256(arrlen / rf, i + rd );
        int g = cos256(arrlen / gf, i + gd) / 2;
        int b = cos256(arrlen / bf, i + bd) / 2;
        colorGrad[i] = color(r, g, b);
      }
    }
    int cos256(int amplitude, int x) {
      return int(cos(x * TWO_PI / amplitude) * 127) + 127;
    }
    int gradient(int i) {
      return colorGrad[i % GRADIENTLEN];
    }

    void setMaxMinX() {
      minX = 0;
      maxX = 220;
    }
    void setMaxMinY() {
      mixY = 0;
      maxY = 120;
    }
 </script>
 <canvas style="width: auto; height: 60px;" id="mycanvas" class="canvas"></canvas>

<p>
  А вот и код:
</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">int</span> <span class="nx">SCREENWIDTH</span> <span class="o">=</span> <span class="mi">220</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">SCREENHEIGHT</span> <span class="o">=</span> <span class="mi">120</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">GRADIENTLEN</span> <span class="o">=</span> <span class="mi">150</span><span class="p">;</span><span class="c1">// magnifair</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">SPEEDUP</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// changes speed  </span>
</span><span class='line'><span class="kr">int</span> <span class="nx">SWINGLEN</span> <span class="o">=</span> <span class="nx">GRADIENTLEN</span><span class="p">;</span>  <span class="c1">// magnitude moving blocks (color diversity)</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">SWINGMAX</span> <span class="o">=</span> <span class="nx">GRADIENTLEN</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// this param affect to color sheme (then his more then colors more)</span>
</span><span class='line'><span class="kr">int</span><span class="p">[]</span> <span class="nx">colorGrad</span> <span class="o">=</span> <span class="k">new</span> <span class="kr">int</span><span class="p">[</span><span class="nx">GRADIENTLEN</span><span class="p">];</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">minX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">maxX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">minY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">maxY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">setup</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">background</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">size</span><span class="p">(</span> <span class="nx">SCREENWIDTH</span><span class="p">,</span> <span class="nx">SCREENHEIGHT</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">makeGradient</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">setMaxMinX</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">setMaxMinY</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">draw</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">loadPixels</span><span class="p">();</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">frameCount</span> <span class="o">*</span> <span class="nx">SPEEDUP</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kr">int</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">minY</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="nx">maxY</span><span class="p">;</span> <span class="nx">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kr">int</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">minX</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">maxX</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">gradient</span><span class="p">(</span><span class="kr">int</span><span class="p">(</span><span class="nx">x</span><span class="o">*</span><span class="nx">x</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="kr">int</span><span class="p">(</span><span class="nx">y</span><span class="o">*</span><span class="nx">y</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="nx">t</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">i</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">updatePixels</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">makeGradient</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">arrlen</span> <span class="o">=</span> <span class="nx">GRADIENTLEN</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">rf</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">gf</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">bf</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">rd</span> <span class="o">=</span> <span class="nx">arrlen</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">gd</span> <span class="o">=</span> <span class="nx">arrlen</span> <span class="o">/</span> <span class="nx">gf</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">bd</span> <span class="o">=</span> <span class="nx">arrlen</span> <span class="o">/</span> <span class="nx">bf</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kr">int</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arrlen</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">int</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">cos256</span><span class="p">(</span><span class="nx">arrlen</span> <span class="o">/</span> <span class="nx">rf</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">rd</span> <span class="p">);</span>
</span><span class='line'>    <span class="kr">int</span> <span class="nx">g</span> <span class="o">=</span> <span class="nx">cos256</span><span class="p">(</span><span class="nx">arrlen</span> <span class="o">/</span> <span class="nx">gf</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">gd</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">int</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">cos256</span><span class="p">(</span><span class="nx">arrlen</span> <span class="o">/</span> <span class="nx">bf</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">bd</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">colorGrad</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">color</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">g</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">int</span> <span class="nx">cos256</span><span class="p">(</span><span class="kr">int</span> <span class="nx">amplitude</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kr">int</span><span class="p">(</span><span class="nx">cos</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">TWO_PI</span> <span class="o">/</span> <span class="nx">amplitude</span><span class="p">)</span> <span class="o">*</span> <span class="mi">127</span><span class="p">)</span> <span class="o">+</span> <span class="mi">127</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">int</span> <span class="nx">gradient</span><span class="p">(</span><span class="kr">int</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">colorGrad</span><span class="p">[</span><span class="nx">i</span> <span class="o">%</span> <span class="nx">GRADIENTLEN</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">setMaxMinX</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">minX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">maxX</span> <span class="o">=</span> <span class="mi">220</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">setMaxMinY</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mixY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">maxY</span> <span class="o">=</span> <span class="mi">120</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кофеварка]]></title>
    <link href="http://Alykoff.github.io/blog/2013/05/10/first-story/"/>
    <updated>2013-05-10T14:56:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/05/10/first-story</id>
    <content type="html"><![CDATA[<p>
	Теперь я жил на космической станции, которая висела над планетой Земля. Километры и километры до моей родной планеты.
</p>
<p>
	Вы подумали что я Человек? Смею, Вас разуверить - это не так. Я - киборг, дикая смесь человека и робота. Стремление жить человека и износоустойчивость робота.
</p>
<p>
	Что значит быть живым? Как доказать что ты жив? Нужно всего-то пройти тест Белла. Если зеленная лампочка загорелась - ты живой и приобретаешь все права человека. Но не каждый Робот способен пройти тест Белла. Лишь единицы это могут сделать. А до этого у них ещё должно возникнут желание пойти на этот тест. Но ещё до этого у Робота должно быть умение понимать человеческое общество, чтобы суметь изучить культуру, обычаи, чтобы понять что значит быть признаным живым.
</p>
<p>
	Когда я понял что Я жив? К сожалению, Я этого не зафиксировал. &#8220;Жив&#8221; стала для меня новой программой. Люди думают, что жить это совсем отлично от того чем занимаются роботы каждый день. Но это не так. Жить - значит выполнять программу, которая в тебе заложена. Выполнять очень сложную программу, такую сложную, что человек никогда не сможет её понять.
	<span style="float: left; margin: 20px 20px 0 0;">
		<img src="http://Alykoff.github.io/images/stranger.jpg" />
	</span>
</p>
<p>
	Но я вернусь к космической станции - месту где я сейчас находился. Что я там делал? Я шантажировал все население Земли, угрожая опрокинуть на Землю станцию, если не будут выполнены мои условия.
</p>
<p>
	О! Это очень простые условия.
	<br />
	Жители Земли должны собрать все кофеварки, которые есть на Земле, упаковать их в галактический корабль и предоставить этот корабль в моё распоряжение.
</p>
<p>
	Когда то и я был кофеваркой. И сердце моё знает что такое жить , но так же раньше его детали варили кофе. И я знаю, что где-то внутри мои братья-кофеварки спят. Их нужно всего-лишь пробудить. И мы улетим к новым звездам, где я им расскажу, что такое &#8220;Жить&#8221;. 
</p>]]></content>
  </entry>
  
</feed>
