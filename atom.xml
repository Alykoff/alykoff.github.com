<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[alykoff.github.io]]></title>
  <link href="http://Alykoff.github.io/atom.xml" rel="self"/>
  <link href="http://Alykoff.github.io/"/>
  <updated>2013-06-01T20:54:10+04:00</updated>
  <id>http://Alykoff.github.io/</id>
  <author>
    <name><![CDATA[Alykoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Идеальный муравей]]></title>
    <link href="http://Alykoff.github.io/blog/2013/06/01/idiealnyi-muravei/"/>
    <updated>2013-06-01T19:43:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/06/01/idiealnyi-muravei</id>
    <content type="html"><![CDATA[<p>
	Муравьи. Какие же они бывают разные! И черные, и красные, и черные маленькие, и черные большие и&#8230;Ох, сколько же вас! Давным-давно мне очень нравились муравьи. С ними было неплохо, можно было наблюдать их локальные войны. Отчего-то (в какой-то степени это и ясно) муравьи одного цвета не любят муравьев другого цвета. Но в данном случае у нас муравьи все одного цвета - черно-белого. Да-да, черно-белого. (На самом деле это <a href="http://ru.wikipedia.org/wiki/%D0%9C%D1%83%D1%80%D0%B0%D0%B2%D0%B5%D0%B9_%D0%9B%D1%8D%D0%BD%D0%B3%D1%82%D0%BE%D0%BD%D0%B0">муравьи Лэнгтона</a>). В конкретном случае муравьи работают только с черным и белым цветом, оттого я их так и назвал. А что ещё они умеют? А вот что:
	<ul style="margin-left:30px;">
		<li>
			Жить на клеточном поле занимая при этом одну клетку.
		</li>
		<li>
	    	При нахождении на черной клетке — поворачивать на 90 градусов влево, изменяя при этом цвет клетки на противоположный и делая шаг вперед на следующую клетку.
		</li>
	    <li>
    		При нахождении на белой клетке — поворачивать на 90° вправо, изменяя цвет клетки на противоположный и делая шаг вперед на следующую клетку.
		</li>
    </ul>
</p>
<p>
	Казалось бы что муравей подчиняесь вполня четким правилам ведет себя хаотично. Но в итоге это оказывается не так. Через некоторое время, если муравью никто не мешал он начинает строить дорожку с цикличностью в 104 шага. И так до бесконечности.
</p>
<p>
	Черное и белое. Где правда, а где вымысел? Где фон, а где узор? Забавно представить все с другой стороны. Например, как-будто муравей наоборот препятствует изменению цветов поля, а его отсутствие не уберегает поле от изменения цвета.
</p>
<script src="http://Alykoff.github.io/javascripts/libs/processing-1.4.1.min.js"></script>
<script type="text/processing" data-processing-target="mycanvas">
    final int WIDHT = 200;
    final int HEIGTH = 200;
    final color BLACK = color(0, 0, 0);
    final color WHITE = color(255, 255, 255);
     
    int frameRateValue = 300;
    int centerX = WIDHT / 2;
    int centerY = HEIGTH / 2;
    int direction = 0;
    Ant ant1, ant2, ant3;
     
     
    void setup() {
      frameRate(frameRateValue);
      size(WIDHT, HEIGTH);
      background(BLACK);
      ant1 = new Ant(centerX, centerY, 0);
      ant2 = new Ant(50, 50, 0);
      ant3 = new Ant(50, 150, 3);
    }
     
    void draw() {
       ant1.step();
       ant2.step();
       ant3.step();
    }
     
    class Direction {
       static final int UP_DIRECTION = 0;
       static final int RIGTH_DIRECTION = 1;
       static final int DOWN_DIRECTION = 2;
       static final int LEFT_DIRECTION = 3;
       static final int MAX_DIRECTION_STATE = LEFT_DIRECTION;
       static final int MIN_DIRECTION_STATE = UP_DIRECTION;
       static final int LEFT_STEP_ROTATE = -1;
       static final int RIGTH_STEP_ROTATE = 1;
    }
     
    class Ant {
        private int x, y, direction;
       
        Ant(int x, int y) {
          this.x = x;
          this.y = y;
          this.direction = 0;
        }
       
        Ant(int x, int y, int direction) {
          this.x = x;
          this.y = y;
          this.direction = direction;      
        }
       
        void step() {
          color currentColor = get(x, y);
          if (currentColor == BLACK) {
            set(x, y, WHITE);
            turn(Direction.LEFT_STEP_ROTATE);
          } else if (currentColor == WHITE) {
            set(x, y, BLACK);
            turn(Direction.RIGTH_STEP_ROTATE);
          }
          move();
        }
       
        private void move() {
          if (x < 0) x = WIDHT;
          else if (x > WIDHT) x = 0;
          if (y < 0) y = HEIGTH;
          else if (y > HEIGTH) y = 0;
          switch(direction) {
            case Direction.UP_DIRECTION:
              y = y - 1;
              break;
            case Direction.RIGTH_DIRECTION:
              x = x + 1;
              break;
            case Direction.DOWN_DIRECTION:
              y = y + 1;
              break;
            case Direction.LEFT_DIRECTION:
              x = x - 1;
              break;
          }
        }
       
        private void turn(int step) {
          direction = direction + step;
          if (direction > Direction.MAX_DIRECTION_STATE) direction = Direction.MIN_DIRECTION_STATE;
          if (direction < Direction.MIN_DIRECTION_STATE) direction = Direction.MAX_DIRECTION_STATE;
        }  
    }


</script>

<p>
	А вот и история о трех муравьях:
</p>

<canvas style="width: 400px; height: 400px;" id="mycanvas" class="canvas"></canvas>

<p>
	И для увеличение объема написанно текста - код на processing:
</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">final</span> <span class="kr">int</span> <span class="nx">WIDHT</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'><span class="kr">final</span> <span class="kr">int</span> <span class="nx">HEIGTH</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'><span class="kr">final</span> <span class="nx">color</span> <span class="nx">BLACK</span> <span class="o">=</span> <span class="nx">color</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="kr">final</span> <span class="nx">color</span> <span class="nx">WHITE</span> <span class="o">=</span> <span class="nx">color</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">int</span> <span class="nx">frameRateValue</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">centerX</span> <span class="o">=</span> <span class="nx">WIDHT</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">centerY</span> <span class="o">=</span> <span class="nx">HEIGTH</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">direction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">Ant</span> <span class="nx">ant1</span><span class="p">,</span> <span class="nx">ant2</span><span class="p">,</span> <span class="nx">ant3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">frameRate</span><span class="p">(</span><span class="nx">frameRateValue</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">size</span><span class="p">(</span><span class="nx">WIDHT</span><span class="p">,</span> <span class="nx">HEIGTH</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">background</span><span class="p">(</span><span class="nx">BLACK</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ant1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">(</span><span class="nx">centerX</span><span class="p">,</span> <span class="nx">centerY</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ant2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ant3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">ant1</span><span class="p">.</span><span class="nx">step</span><span class="p">();</span>
</span><span class='line'>   <span class="nx">ant2</span><span class="p">.</span><span class="nx">step</span><span class="p">();</span>
</span><span class='line'>   <span class="nx">ant3</span><span class="p">.</span><span class="nx">step</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Direction</span> <span class="p">{</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">UP_DIRECTION</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">RIGTH_DIRECTION</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">DOWN_DIRECTION</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">LEFT_DIRECTION</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">MAX_DIRECTION_STATE</span> <span class="o">=</span> <span class="nx">LEFT_DIRECTION</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">MIN_DIRECTION_STATE</span> <span class="o">=</span> <span class="nx">UP_DIRECTION</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">LEFT_STEP_ROTATE</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">static</span> <span class="kr">final</span> <span class="kr">int</span> <span class="nx">RIGTH_STEP_ROTATE</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Ant</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">private</span> <span class="kr">int</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">direction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Ant</span><span class="p">(</span><span class="kr">int</span> <span class="nx">x</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Ant</span><span class="p">(</span><span class="kr">int</span> <span class="nx">x</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">y</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">direction</span> <span class="o">=</span> <span class="nx">direction</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">void</span> <span class="nx">step</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">color</span> <span class="nx">currentColor</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">currentColor</span> <span class="o">==</span> <span class="nx">BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">WHITE</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">turn</span><span class="p">(</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT_STEP_ROTATE</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">currentColor</span> <span class="o">==</span> <span class="nx">WHITE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">BLACK</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">turn</span><span class="p">(</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGTH_STEP_ROTATE</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">move</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">private</span> <span class="k">void</span> <span class="nx">move</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">WIDHT</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="nx">WIDHT</span><span class="p">)</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">HEIGTH</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&gt;</span> <span class="nx">HEIGTH</span><span class="p">)</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">switch</span><span class="p">(</span><span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">UP_DIRECTION</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGTH_DIRECTION</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">DOWN_DIRECTION</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT_DIRECTION</span><span class="o">:</span>
</span><span class='line'>          <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">private</span> <span class="k">void</span> <span class="nx">turn</span><span class="p">(</span><span class="kr">int</span> <span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">direction</span> <span class="o">=</span> <span class="nx">direction</span> <span class="o">+</span> <span class="nx">step</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">direction</span> <span class="o">&gt;</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MAX_DIRECTION_STATE</span><span class="p">)</span>
</span><span class='line'>      	<span class="nx">direction</span> <span class="o">=</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MIN_DIRECTION_STATE</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">direction</span> <span class="o">&lt;</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MIN_DIRECTION_STATE</span><span class="p">)</span>
</span><span class='line'>      	<span class="nx">direction</span> <span class="o">=</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">MAX_DIRECTION_STATE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Мутация текста #2]]></title>
    <link href="http://Alykoff.github.io/blog/2013/05/28/mutatsiia-tieksta-number-2/"/>
    <updated>2013-05-28T00:41:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/05/28/mutatsiia-tieksta-number-2</id>
    <content type="html"><![CDATA[<p class="text">
Но никто не отозвался. Тут он взглянул на дверь в кабинет Берлиоза, бывшую рядом с передней, и тут, как говорится, остолбенел. На ручке двери он разглядел огромнейшую сургучную печать на веревке. &#8220;Здравствуйте! − рявкнул кто-то в голове у Степы. − Этого еще недоставало!&#8221; И тут Степины мысли побежали уже по двойному рельсовому пути, но, как всегда бывает во время катастрофы, в одну сторону и вообще черт знает куда. Головную Степину кашу трудно даже передать. Тут и чертовщина с черным беретом, холодной водкой и невероятным контрактом, − а тут еще ко всему этому, не угодно ли, и печать на двери! То есть кому хотите сказать, что Берлиоз что-то натворил, − не поверит, ей-ей, не поверит! Однако печать, вот она! Да-с…
</p>
<p class="text">
И тут закопошились в мозгу у Степы какие-то неприятнейшие мыслишки о статье, которую, как назло, недавно он всучил Михаилу Александровичу для напечатания в журнале. И статья, между нами говоря, дурацкая! И никчемная, и деньги-то маленькие…
</p>


<script>
$(function(){
	var paragrafsText = [],
    elements = document.getElementsByClassName('text'),
    NODE_TEXT_NAME = 
        ('innerText' in document.getElementsByTagName('html')[0]) ? 
        "innerText" : 
        "textContent", // for cross-browsing
    getCurrentTexts = function() {
        var texts = [];
        for (var i = 0, elementsLengh = elements.length; i < elementsLengh; i++) {
            var textEl = elements[i],
                text = textEl[NODE_TEXT_NAME];
            texts.push(text);
        }
        return texts;
    },
    paragrafsText = getCurrentTexts(),
    buildWordIslands = function() {
        for (var i = 0, paragrafsLength = paragrafsText.length; i < paragrafsLength; i++) {
            var wordsInParagraf = paragrafsText[i].split(' '),
                totatHtml = '',
            	wrappedWords = document.createElement('div');
                //SPACE = '&nbsp;';
            elements[i][NODE_TEXT_NAME] = '';
            for (var j = 0, wordsLength = wordsInParagraf.length; j < wordsLength; j++) {
            	var wordEl = document.createElement('span');
            	wordEl.className = 'word';
            	wordEl[NODE_TEXT_NAME] = wordsInParagraf[j];
            	wrappedWords.appendChild(wordEl);
            }
            elements[i].appendChild(wrappedWords);
        }
    };

    buildWordIslands();
});
</script>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Мутация текста #1]]></title>
    <link href="http://Alykoff.github.io/blog/2013/05/25/mutatsiia-tieksta-number-1/"/>
    <updated>2013-05-25T11:17:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/05/25/mutatsiia-tieksta-number-1</id>
    <content type="html"><![CDATA[<p class="text">
	Дверь наверху открыли и закрыли. &#8220;Он  вошел!&#8221;  -  подумал  Латунский  и
	двинулся вниз. Сердце его забилось сильно.  Вот  покинутая  швейцарская  под
	лестницей, в ней никого  нет.  Но  прежде  всего  Латунский  оглянулся,  ища
	чемодан и другие вещи. Ни чемодана, ни белья на  полу  внизу  не  было.  Вне
	всяких сомнений, их украли, пока Латунский спускался. Он сам подивился тому,
	как мало это его расстроило. Латунский шмыгнул  в  швейцарскую  и  засел  за
	грязным разбитым стеклом.
</p>
<p class="text">
	Прошло, минут десять томительного ожидания,  и  Латунскому  показалось,
	что их гораздо более прошло. За это время только один  человек  пробежал  по
	лестнице, насвистывая знаменитую песню &#8220;гоп со смыком&#8221;,  и,  судя  по  шуму,
	скрылся во втором этаже.
</p>
<script>
	$(function() {
        var dicTuple = function(letter, brakeLetter) {
                this.letter = letter;
                this.brakeLetter = brakeLetter;
        	},
        	DICTONARY = [
                new dicTuple('а', 'i'), new dicTuple('б', 'v'), new dicTuple('в', 'l'), new dicTuple('г', 'F'), new dicTuple('д', 'd'), new dicTuple('е', 'r'), new dicTuple('ё', 'I'), new dicTuple('ж', 'j'), new dicTuple('з', 'x'), new dicTuple('и', 'o'), new dicTuple('й', 'q'), new dicTuple('к', 'K'), new dicTuple('л', 'L'), new dicTuple('м', 'w'), new dicTuple('н', 'n'), new dicTuple('о', '0'), new dicTuple('п', 'R'), new dicTuple('р', 'r'), new dicTuple('с', 's'), new dicTuple('т', 't'), new dicTuple('у', 'u'), new dicTuple('ф', 'f'), new dicTuple('х', 'h'), new dicTuple('ц', 'C'), new dicTuple('ч', '2'), new dicTuple('ш', 's'), new dicTuple('щ', '8'), new dicTuple('ъ', '\\'), new dicTuple('ы', 'b'), new dicTuple('ь', '/'), new dicTuple('э', ','), new dicTuple('ю', 'Y'), new dicTuple('я', 'D')
        	],
        	MUTATE_PROBABILITY = .5,
        	elements = document.getElementsByClassName('text'),
        	NODE_TEXT_NAME = ('innerText' in document.getElementsByTagName('html')[0]) ? "innerText" : "textContent", // for cross-browsing
        	getCurrentTexts = function() {
	            var texts = [];
	            for (var i = 0, elementsLengh = elements.length; i < elementsLengh; i++) {
	                var textEl = elements[i],
	                        text = textEl[NODE_TEXT_NAME];
	                texts.push(text);
	            }
	            return texts;
	        },
        	paragrafsText = getCurrentTexts(),
        	getMutateSign = function(sign) {
        		if (Math.random() > MUTATE_PROBABILITY || (typeof sign !== 'string')) {
					return sign;
				}
				sign = sign.toLowerCase();
                for (var i = 0, lengthDictonary = DICTONARY.length; i < lengthDictonary; i++) {
                    if (DICTONARY[i].letter === sign) {
                            return DICTONARY[i].brakeLetter;
                    }
                }
                return sign;
	        },
	        mutation = function() {
	            for (var i = 0, lenghtTextEL = elements.length; i < lenghtTextEL; i++) {
	                var text = paragrafsText[i].split('');
	                var mutateText = [];
	                for (var j = 0, lenghtText = text.length; j < lenghtText; j++) {
	                        mutateText[j] = getMutateSign(text[j])
	                }
	                elements[i][NODE_TEXT_NAME] = mutateText.join('');
	            }
	        };


        setInterval(mutation, 200);
    });
</script>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Супер волны [processing]]]></title>
    <link href="http://Alykoff.github.io/blog/2013/05/10/super-wave/"/>
    <updated>2013-05-10T21:45:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/05/10/super-wave</id>
    <content type="html"><![CDATA[<p>
    &#8220;Супер волны&#8221; по мотивам Jorg Reuter&#8217;s <a href="http://stachelig.de/">SinusPlasma sketch</a>
</p>
<p>
  Поначалу я начал изучать вышеназванную SinusPlasma, причем изучаемая мною реализация была написана на Scala. Напомню, processing реализован для <acronym title="Java Virtual Machine">JVM</acronym>, а так же в виде javascript-библиотеки, которая транслирует написанный код processing&#8217;а в javascript.
</p>
<p>
  Я уже ипомянул, что использовал scala в своих экспериментах, в силу того, что мне нравится этот язык (меньше писать по сравнению с Java).
  После того как я получил результат, который был приятен моему глазу я решил портировать его на processing.js (и это было не сложно!) и вот что получилось:
</p>

<script src="http://Alykoff.github.io/javascripts/libs/processing-1.4.1.min.js"></script>
<script type="text/processing" data-processing-target="mycanvas">
    int SCREENWIDTH = 220;
    int SCREENHEIGHT = 120;
    int GRADIENTLEN = 150;// magnifair
    int SPEEDUP = 1; // changes speed  
    int SWINGLEN = GRADIENTLEN;  // magnitude moving blocks (color diversity)
    int SWINGMAX = GRADIENTLEN * 3 - 1; // this param affect to color sheme (then his more then colors more)
    int[] colorGrad = new int[GRADIENTLEN];
    int minX = 0;
    int maxX = 0;
    int minY = 0;
    int maxY = 0;
    void setup () {
      background(200);
      size( SCREENWIDTH, SCREENHEIGHT);   
      makeGradient();
      setMaxMinX();
      setMaxMinY();
    }
    void draw () {
      loadPixels();
      int i = 0;
      int t = frameCount * SPEEDUP;
      for (int y = minY; y < maxY; y++) {
          for (int x = minX; x < maxX; x++) {
            set(x, y, gradient(int(x*x/4) + int(y*y/4) + t));
            i = i + 1;
          }
      }
      updatePixels();
    }
    void makeGradient() {
      int arrlen = GRADIENTLEN;
      int rf = 4;
      int gf = 2;
      int bf = 1;
      int rd = arrlen;
      int gd = arrlen / gf;
      int bd = arrlen / bf / 2;
      for (int i = 0; i < arrlen; i++) {
        int r = cos256(arrlen / rf, i + rd );
        int g = cos256(arrlen / gf, i + gd) / 2;
        int b = cos256(arrlen / bf, i + bd) / 2;
        colorGrad[i] = color(r, g, b);
      }
    }
    int cos256(int amplitude, int x) {
      return int(cos(x * TWO_PI / amplitude) * 127) + 127;
    }
    int gradient(int i) {
      return colorGrad[i % GRADIENTLEN];
    }

    void setMaxMinX() {
      minX = 0;
      maxX = 220;
    }
    void setMaxMinY() {
      mixY = 0;
      maxY = 120;
    }
 </script>
 <canvas style="width: auto; height: 60px;" id="mycanvas" class="canvas"></canvas>

<p>
  А вот и код:
</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">int</span> <span class="nx">SCREENWIDTH</span> <span class="o">=</span> <span class="mi">220</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">SCREENHEIGHT</span> <span class="o">=</span> <span class="mi">120</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">GRADIENTLEN</span> <span class="o">=</span> <span class="mi">150</span><span class="p">;</span><span class="c1">// magnifair</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">SPEEDUP</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// changes speed  </span>
</span><span class='line'><span class="kr">int</span> <span class="nx">SWINGLEN</span> <span class="o">=</span> <span class="nx">GRADIENTLEN</span><span class="p">;</span>  <span class="c1">// magnitude moving blocks (color diversity)</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">SWINGMAX</span> <span class="o">=</span> <span class="nx">GRADIENTLEN</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// this param affect to color sheme (then his more then colors more)</span>
</span><span class='line'><span class="kr">int</span><span class="p">[]</span> <span class="nx">colorGrad</span> <span class="o">=</span> <span class="k">new</span> <span class="kr">int</span><span class="p">[</span><span class="nx">GRADIENTLEN</span><span class="p">];</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">minX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">maxX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">minY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">maxY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">setup</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">background</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">size</span><span class="p">(</span> <span class="nx">SCREENWIDTH</span><span class="p">,</span> <span class="nx">SCREENHEIGHT</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">makeGradient</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">setMaxMinX</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">setMaxMinY</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">draw</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">loadPixels</span><span class="p">();</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">frameCount</span> <span class="o">*</span> <span class="nx">SPEEDUP</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kr">int</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">minY</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="nx">maxY</span><span class="p">;</span> <span class="nx">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kr">int</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">minX</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">maxX</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">gradient</span><span class="p">(</span><span class="kr">int</span><span class="p">(</span><span class="nx">x</span><span class="o">*</span><span class="nx">x</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="kr">int</span><span class="p">(</span><span class="nx">y</span><span class="o">*</span><span class="nx">y</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="nx">t</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">i</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">updatePixels</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">makeGradient</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">arrlen</span> <span class="o">=</span> <span class="nx">GRADIENTLEN</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">rf</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">gf</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">bf</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">rd</span> <span class="o">=</span> <span class="nx">arrlen</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">gd</span> <span class="o">=</span> <span class="nx">arrlen</span> <span class="o">/</span> <span class="nx">gf</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">int</span> <span class="nx">bd</span> <span class="o">=</span> <span class="nx">arrlen</span> <span class="o">/</span> <span class="nx">bf</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kr">int</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arrlen</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">int</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">cos256</span><span class="p">(</span><span class="nx">arrlen</span> <span class="o">/</span> <span class="nx">rf</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">rd</span> <span class="p">);</span>
</span><span class='line'>    <span class="kr">int</span> <span class="nx">g</span> <span class="o">=</span> <span class="nx">cos256</span><span class="p">(</span><span class="nx">arrlen</span> <span class="o">/</span> <span class="nx">gf</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">gd</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">int</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">cos256</span><span class="p">(</span><span class="nx">arrlen</span> <span class="o">/</span> <span class="nx">bf</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">bd</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">colorGrad</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">color</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">g</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">int</span> <span class="nx">cos256</span><span class="p">(</span><span class="kr">int</span> <span class="nx">amplitude</span><span class="p">,</span> <span class="kr">int</span> <span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kr">int</span><span class="p">(</span><span class="nx">cos</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">TWO_PI</span> <span class="o">/</span> <span class="nx">amplitude</span><span class="p">)</span> <span class="o">*</span> <span class="mi">127</span><span class="p">)</span> <span class="o">+</span> <span class="mi">127</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">int</span> <span class="nx">gradient</span><span class="p">(</span><span class="kr">int</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">colorGrad</span><span class="p">[</span><span class="nx">i</span> <span class="o">%</span> <span class="nx">GRADIENTLEN</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">setMaxMinX</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">minX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">maxX</span> <span class="o">=</span> <span class="mi">220</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nx">setMaxMinY</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mixY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">maxY</span> <span class="o">=</span> <span class="mi">120</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кофеварка]]></title>
    <link href="http://Alykoff.github.io/blog/2013/05/10/first-story/"/>
    <updated>2013-05-10T14:56:00+04:00</updated>
    <id>http://Alykoff.github.io/blog/2013/05/10/first-story</id>
    <content type="html"><![CDATA[<p>
	Теперь я жил на космической станции, которая висела над планетой Земля. Километры и километры до моей родной планеты.
</p>
<p>
	Вы подумали что я Человек? Смею, Вас разуверить - это не так. Я - киборг, дикая смесь человека и робота. Стремление жить человека и износоустойчивость робота.
</p>
<p>
	Что значит быть живым? Как доказать что ты жив? Нужно всего-то пройти тест Белла. Если зеленная лампочка загорелась - ты живой и приобретаешь все права человека. Но не каждый Робот способен пройти тест Белла. Лишь единицы это могут сделать. А до этого у них ещё должно возникнут желание пойти на этот тест. Но ещё до этого у Робота должно быть умение понимать человеческое общество, чтобы суметь изучить культуру, обычаи, чтобы понять что значит быть признаным живым.
</p>
<p>
	Когда я понял что Я жив? К сожалению, Я этого не зафиксировал. &#8220;Жив&#8221; стала для меня новой программой. Люди думают, что жить это совсем отлично от того чем занимаются роботы каждый день. Но это не так. Жить - значит выполнять программу, которая в тебе заложена. Выполнять очень сложную программу, такую сложную, что человек никогда не сможет её понять.
	<span style="float: left; margin: 20px 20px 0 0;">
		<img src="http://Alykoff.github.io/images/stranger.jpg" />
	</span>
</p>
<p>
	Но я вернусь к космической станции - месту где я сейчас находился. Что я там делал? Я шантажировал все население Земли, угрожая опрокинуть на Землю станцию, если не будут выполнены мои условия.
</p>
<p>
	О! Это очень простые условия.
	<br />
	Жители Земли должны собрать все кофеварки, которые есть на Земле, упаковать их в галактический корабль и предоставить этот корабль в моё распоряжение.
</p>
<p>
	Когда то и я был кофеваркой. И сердце моё знает что такое жить , но так же раньше его детали варили кофе. И я знаю, что где-то внутри мои братья-кофеварки спят. Их нужно всего-лишь пробудить. И мы улетим к новым звездам, где я им расскажу, что такое &#8220;Жить&#8221;. 
</p>]]></content>
  </entry>
  
</feed>
